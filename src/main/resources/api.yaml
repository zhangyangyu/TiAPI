openapi: "3.0.1"
info:
  description: "TiAPI is a standalone service providing restful API to execute SQL statements on TiDB to users. It's an experimental project making TiDB more serviceless. With TiAPI, the real TiDB instances are transparent to end users. This frees users from management duties of database instances and offers more flexibility to the database providers of upgrading and other management things."
  version: "1.0.0"
  title: "TiAPI"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: "sql"
    description: "Operations about executing SQL statements"
  - name: "user"
    description: "Operations about user"
  - name: "management"
    description: "Operations for internal management"

paths:
  /user:
    post:
      tags:
        - "user"
      summary: "upsert a user and return a session"
      description: "Use username and password to create a user or return a session if exists"
      operationId: "authUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthUserRequest'
        required: true
      responses:
        "200":
          description: "Return a session of an existed user"
        "201":
          description: "Create a user successfully"
        "401":
          description: "Wrong username and password"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/statements:
    post:
      tags:
        - "sql"
      summary: "execute SQL statements"
      operationId: "executeSQL"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteSQLRequest'
        required: true
      responses:
        "200":
          description: "The statement was executed successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecuteSQLResponse'
        "401":
          description: "Not authorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: "An error occurred when executing the statement"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /management/tidb:
    get:
      tags:
        - "management"
      summary: "list all backend TiDB instances"
      operationId: "listTiDB"
      responses:
        "200":
          description: "list all backend TiDB instances successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTiDBResponse"
    post:
      tags:
        - "management"
      summary: "add new backend TiDB instance"
      operationId: "addTiDB"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TiDBInstance'
        required: true
      responses:
        "201":
          description: "add a TiDB instance successfully"

  /management/user:
    get:
      tags:
        - "management"
      summary: "list all users"
      operationId: listUser
      responses:
        "200":
          description: "list all users successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserResponse'

  /management/usertotidb:
    get:
      tags:
        - "management"
      summary: "list all user to tidb relations"
      operationId: listUserToTiDB
      responses:
        "200":
          description: "list all user to tidb relations successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserToTiDBResponse'

components:
  schemas:
    AuthUserRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        database:
          type: string
    ExecuteSQLRequest:
      type: object
      properties:
        statement:
          type: string
    ExecuteSQLResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: array
            items:
              type: object
    TiDBInstance:
      type: object
      properties:
        host:
          type: string
        port:
          type: integer
        adminUsername:
          type: string
        adminPassword:
          type: string
    ListTiDBResponse:
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/TiDBInstance'
    UserInstance:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    ListUserResponse:
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/UserInstance'
    UserToTiDBInstance:
      type: object
      properties:
        username:
          type: string
        created:
          type: boolean
        tidb:
          $ref: '#/components/schemas/TiDBInstance'
    ListUserToTiDBResponse:
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/UserToTiDBInstance'
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
